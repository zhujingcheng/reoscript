<?xml version="1.0" encoding="utf-8" ?>
<!--
 * ReoScript - .NET Script Language Engine
 * 
 * http://www.unvell.com/ReoScript
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 * PURPOSE.
 *
 * This software released under LGPLv3 license.
 * Author: Jing Lu <dujid0 at gmail.com>
 * 
 * Copyright (c) 2012-2014 unvell.com, all rights reserved.
-->

<test-suite id="006" name="proto">

  <test-case id="001" name="instance">
    <script>
      var t = debug.assert;

      function A() { }

      var a = new A();

      t( a.__proto__ == A.prototype );
    </script>
  </test-case>

  <test-case id="002" name="property extension">
    <script>
      var t = debug.assert;

      Array.prototype.reverse = function() {
        var rs = [];
        for(var i = this.length-1; i &gt;= 0; i--) {
          rs.push(this[i]);
        }
        return rs;
      };
      
      var a = [1,2,3].reverse();
      
      t( a[0], 3 );
      t( a[1], 2 );
      t( a[2], 1 );
    </script>
  </test-case>
  
  <test-case id="003" name="own property">
    <script>
      var t = debug.assert;

      function A() {
        this.funInProto = function() { return "fun in instance"; };
      }

      var a = new A();

      t( a.funInProto() == "fun in instance" );
     
      t( a.hasOwnProperty('funInProto') == true );
      t( A.prototype.hasOwnProperty('funInProto') == false);
      
      t( a.hasOwnProperty('hasOwnProperty') == false );
    </script>
  </test-case>

  <test-case id="004" name="string">
    <script>
      var t = debug.assert;

      var str = "hello world";
      
      t( str.hasOwnProperty('trim') == false );
      t( str.hasOwnProperty('length') == true );
    </script>
  </test-case>

  <test-case id="005">
    <script>
      var t = debug.assert;

      var str = "hello world";
      t( str.fun == null );
      
      String.prototype.fun = function() {};
      t( str.fun != null );
      
      t( str.hasOwnProperty('fun') == false );
      t( String.prototype.hasOwnProperty('fun') == true );
      
    </script>
  </test-case>

  <test-case id="006">
    <script>
      var t = debug.assert;

      function A() { }
      var a = new A(), b = { };
      
      A.prototype.age = 10;

      t( a.age == 10 );
      t( a.hasOwnProperty('age') == false );
      
      t( b.age == null );
      t( b.hasOwnProperty('age') == false );

    </script>
  </test-case>

  <test-case id="007" name="inherit">
    <script>
      var t = debug.assert;

      var arr = [];
      
      function Super() {
        this.run = function() { return 'run'; };
      }
      
      function SubClass() {
        this.__proto__ = new Super();
        
        this.run2 = function() { return 'run2'; };
      }
      
      var sub = new SubClass();
      
      t( sub.run != null );
      t( sub.run2 != null );
           
      t( sub.run() == 'run' );
      t( sub.run2() == 'run2' );
      
      // override
      sub.run = function() { return 'override'; };
      t( sub.run() == 'override' );
      t( sub.run2() == 'run2' );
      
    </script>
  </test-case>

  <test-case id="008" name="property in prototype">
    <script>
      var t = debug.assert;
     
      Array.prototype.aa = 10;
      
      var a = [];
      t(a.aa, 10);
      
      a.aa += 5;
      t(Array.prototype.aa, 10);
      t(a.aa, 15);
      
      Array.prototype.aa = 20;
      t(a.aa, 15);
      t(Array.prototype.aa, 20);
      
    </script>
  </test-case>
  
  <test-case id="009" name="override to prototype">
    <script>
      var t = debug.assert;

      Array.prototype.aa = 10;

      var a = [];
      t(a.aa, 10);

      a.aa += 5;
      t(Array.prototype.aa, 10);
      t(a.aa, 15);

      a.aa=null;
      
      t(a.aa, null);
      t(Array.prototype.aa, 10);

    </script>
  </test-case>
</test-suite>