<?xml version="1.0" encoding="utf-8" ?>
<!--
 * ReoScript - .NET Script Language Engine
 * 
 * http://www.unvell.com/ReoScript
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 * PURPOSE.
 *
 * This software released under LGPLv3 license.
 * Author: Jing Lu <dujid0@gmail.com>
 * 
 * Copyright (c) 2012-2014 unvell.com, all rights reserved.
-->

<test-suite id="009" name="array">
  
  <test-case id="001">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5,6,7];
      
      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="002">
    <script>
      var t = debug.assert;

      var arr = [];
      
      arr.push(1);
      arr.push(2, 3, 4);
      arr.push(5, 6, 7);

      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="003">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];
      
      arr[0] = 9;
      t( arr[0] + arr[1] == 11 );

    </script>
  </test-case>

  <test-case id="004" name="remove element">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];
      
      arr.splice(0,1);
      t(arr.length==4);
      
      arr.splice(1,1,10,11);
      t(arr.length==5);

      t(arr[0] == 2);
      t(arr[1] == 10);
      t(arr[2] == 11);
      t(arr[3] == 4);
      t(arr[4] == 5);

    </script>
  </test-case>

  <test-case id="005" name="remove in iteration">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];

      for(e in arr)
        if(e==3) arr.splice(2,1);
        
      t( arr.length == 4 );
      t( arr[0] == 1 );
      t( arr[1] == 2 );
      t( arr[2] == 4 );
      t( arr[3] == 5 );

    </script>
  </test-case>

  <test-case id="006" name="constructor">
    <script>
      var t = debug.assert;

      var arr = new Array(1,2,3,4,5,6,7);
      
      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="007" name="indexOf">
    <script>
      var t = debug.assert;

      var fun = function() { };
      var arr = new Array(null, 3, "hello", function() { }, fun, 7);
      
      t( arr.indexOf(3) == 1 );
      t( arr.indexOf(fun) == 4 );
      t( arr.indexOf('hello') == 2 );

    </script>
  </test-case>

  <test-case id="008" name="join">
    <script>
      var t = debug.assert;

      var arr = ['apple', 'banana', 'orange'];
      var str = arr.join();
      
      t(str, 'apple,banana,orange');
      
      arr = [1,2,3,4,5];
      str = arr.join(':');
      t(str, '1:2:3:4:5');

    </script>
  </test-case>
  
  <test-case id="010" name="call from array">
    <script>
      var t = debug.assert;

      var a = 1, b = 2, c = 3;
      var arr = [ a, b, c, b * c, a + c];

      t( arr[0] == 1 );
      t( arr[1] == 2 );
      t( arr[2] == 3 );
      t( arr[3] == 6 );
      t( arr[4] == 4 );

      arr[0] = function() { 
        return (a + b) * 2;
      };
      
      t( arr[0]() == 6 );

      a = 15;
      b = 5;
      t( arr[0]() == 40 );
      
    </script>
  </test-case>

  <test-case id="011" name="auto resize">
    <script>
      var t = debug.assert;

      var arr = [ 1,2,3 ];
      t(arr.length, 3);
      
      arr[9] = 10;
      t(arr.length === 10);
      
    </script>
  </test-case>
  
  
</test-suite>