<?xml version="1.0" encoding="utf-8" ?>
<!--
 * ReoScript - .NET Script Language Engine
 * 
 * http://www.unvell.com/ReoScript
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 * PURPOSE.
 *
 * This software released under LGPLv3 license.
 * Author: Jing Lu <dujid0@gmail.com>
 * 
 * Copyright (c) 2012-2013 unvell.com, all rights reserved.
-->

<test-suite id="052" name="for">

  <test-case id="001">
    <script>
      var t = debug.assert;

      var o=0;
      for(var i=0;i&lt;10;i++)
        o+=i;
        
      t( o == 45 );
        
    </script>
  </test-case>

  <test-case id="002">
    <script>
      var t = debug.assert;

      var o = '';
      
      var s = 'hello world!';
      
      for(var i=0;i&lt;s.length;i++)
        if(s[i] != ' ' &amp;&amp; s[i] != '!')
          o += s[i];
      
      t( o == 'helloworld' );

    </script>
  </test-case>

  <test-case id="003" name="for in array">
    <script>
      var t = debug.assert;

      var arr = [ 1, 2, 3, 4, 5 ];

      var sum = 0;
      for(element in arr) sum += element;

      t( sum == 15 );
    </script>
  </test-case>

  <test-case id="004" name="for in string">
    <script>
      var t = debug.assert;

      var str = "hello";

      var arr = [];
      for(char in str) arr.push(char);

      t( arr[0] == 'h' );
      t( arr[4] == 'o' );
    </script>
  </test-case>

  <test-case id="005" name="break">
    <script>
      var t = debug.assert;

      var a = [[1,2,3],[4,5,6],[7,8,9]];

      var o = '';
      for(i=0;i&lt;a.length;i++)
        for(k=0;k&lt;a[i].length;k++)
          o+=a[i][k];

      t( o == '123456789' );

      var a = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]];
      var o = '';
      
      for (i=0; i&lt;a.length; i++) {
      
        if (i > 1) break;
       
        for (k=0; k&lt;a[i].length; k++) {
          if (k > 2) break;
        
          o+=a[i][k];
        }
      }
      
      t( o == '123123' );
    </script>
  </test-case>

  <test-case id="006" name="variable scope">
    <script>
      var t = debug.assert;

      var arr = [1,2,3];
      
      // a in global
      for(a in arr) t(a!=null);
      t(a == 3);
      
      // b used in function but declared in global
      function() { for(b in arr) t(b != null); } ();
      t(b == 3);
      
      // c used and declared in local
      function() { for(var c in arr) t(c != null); } ();
      t(c == null);
      
    </script>
  </test-case>

  <test-case id="007" name="mutil-var">
    <script>
      var t = debug.assert;

      var i = 10;
      for(var a=0, b=1; a&lt;10 &amp;&amp; b&lt;11; a++, b++)
        i--;
        
      t( i, 0 );
      t( a, 10 );
      t( b, 11 );
        
    </script>
  </test-case>

  <test-case id="008" name="return in for">
    <script>
      var t = debug.assert;

      function func() {
        for (var i=0;i&lt;10;i++) {
          if(i==5) return i;
        }
        return 10;
      }
        
      t( func(), 5 );
        
    </script>
  </test-case>

  <test-case id="009" name="continue in for">
    <script>
      var t = debug.assert;

      var c = 0;
      
      for (var i=0;i&lt;10;i++) {
        if(i%2==0) continue;
        c++;
      }
        
      t( c, 5 );
        
    </script>
  </test-case>
</test-suite>