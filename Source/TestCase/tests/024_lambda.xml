<?xml version="1.0" encoding="utf-8" ?>
<!--
 * ReoScript - .NET Script Language Engine
 * 
 * http://www.unvell.com/ReoScript
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 * PURPOSE.
 *
 * This software released under LGPLv3 license.
 * Author: Jing Lu <dujid0 at gmail.com>
 * 
 * Copyright (c) 2012-2014 unvell.com, all rights reserved.
-->

<test-suite id="024" name="lambda">

  <test-case id="001" name="lambda">
    <script>
      var t = debug.assert;
      
      var plus = (a, b) => a + b;
      t( plus(10, 20) == 30 );
    </script>
  </test-case>

  <test-case id="002" name="anonymous lambda">
    <script>
      var t = debug.assert;

      // anonymous function
      t( (a, b) => { return a + b; } (10, 20) == 30 );

      // anonymous lambda
      t( ( ((a,b)=>a+b)(2,3) ) == 5 );

    </script>
  </test-case>

  <test-case id="003" name="nested anonymous lambda">
    <script>
      var t = debug.assert;

      t( ( ((a,b)=>a+b)( ((x)=>x*2)(5), ((y)=>y/2)(8) ) ) == 14 );
    </script>
  </test-case>

  <test-case id="010" name="where">
    <script>
      var t = debug.assert;

      var arr = [1, 2, 5, 7, 8, 10, 12, 15, 17, 18, 19];
      
      Array.prototype.equals = targetArray => {
        if( targetArray == null 
          || this.length != targetArray.length) 
          return false;
        
        for(var i=0; i&lt;this.length; i++)
          if( this[i] != targetArray[i] )
            return false;
        
        return true;
      };
      
      Array.prototype.where = predicate => {
        var result = [];
        
        for(var element in this)
          if( predicate(element) )
            result.push(element);

        return result;
      };
      
      var get_nos = n => Math.floor(n / 2) == n / 2;
      
      var rs = arr.where( get_nos );
      
      t( rs != null );
      t( rs.equals([2, 8, 10, 12, 18]) );

    	rs = arr.where( n => n &gt;= 10 );
      
      t( rs != null );
      t( rs.equals([10, 12, 15, 17, 18, 19]) );

    </script>
  </test-case>

  <test-case id="011" name="where sum">
    <script>
      var t = debug.assert;

      var arr = [1, 2, 5, 7, 8, 10, 12, 15, 17, 18, 19];
      
      Array.prototype.where = predicate => {
        var result = [];

        for(var element in this)
          if( predicate(element) )
            result.push(element);

        return result;
      };

      Array.prototype.sum = selector => {
        var total = 0;
        
        for(element in this) 
        {
          total += (selector == null ? element : selector(element));
        }

        return total;
      };
      
      t( arr.where( n => n &lt; 10 ).sum() == 23 );  // 1+2+5+7+8
      
      t( [1,2,3,4,5].where(n=&gt;n&gt;=3).sum() == 12 ); // 3+4+5
      
    </script>
  </test-case>

  <test-case id="012" name="object sum">
    <script>
      var t = debug.assert;

      function Sales(year, amount) {
        this.year = year;
        this.amount = amount;
      }
      
      var arr = [ new Sales(2005, 130),
                  new Sales(2006, 100),
                  new Sales(2007, 210),
                  new Sales(2008, 190), ];

      Array.prototype.sum = selector => {
        var total = 0;
        
        for(element in this) 
        {
          total += (selector == null ? element : selector(element));
        }

        return total;
      };

      Array.prototype.min = selector => {
        var min = null;
        
        for(element in this) 
        {
          var val = (selector == null ? element : selector(element));
          if(min == null || min &gt; val) min = val;
        }

        return min;
      };
      
      // min year
      t( arr.min(obj => obj.year) == 2005 );

      // min amount
      t( arr.min(obj => obj.amount) == 100 );

      // total amount
      t( arr.sum(obj => obj.amount) == 630 );
      
    </script>
  </test-case>
</test-suite>